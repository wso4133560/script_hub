# 调试子进程
set follow-fork-mode [parent|child]

parent: fork之后继续调试父进程，子进程不受影响。
child: fork之后调试子进程，父进程不受影响。

# 打开单步调试程序汇编的命令
set disassemble-next-line on

# 批量打断点
rbreak rb_*指令，找到了程序中所有以 tb_* 开头的函数

# 函数地址打断点
当调试汇编程序，或者没有调试信息的程序时，经常需要在程序地址上打断点，方法为b *address。例如：
(gdb) b *0x400522

# 开启日志将gdb的每条调试日志输出日志
set logging file [日志文件名字]
set logging on

# 自动反汇编接下来要执行的代码
set disassemble-next-line on

# 单步调试指令
si命令

# 设置多次进入断点
ignore [断点ID] [断点次数]

# 打印指定地址的二进制
x/[前多少位]x [地址]

# 查看当前指令前的数据
x/200i $pc-200

# 打条件断点
b [断点ID|断点位置] if [c语言的condition]

# 线程锁
set scheduler-locking off|on
off:不锁定任何线程，如果在当前模式使用continue的话会启动所有线程
on:打开线程锁，锁定其他线程，只有当前线程执行

# 根据地址查看函数符号
info symbol [地址]

# 例如: 监视一个4byte 的整形地址. 书写格式举例如下.
watch *(int*)0x12345678

# 执行很多次的命令
[命令] [次数]
